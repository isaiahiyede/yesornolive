"""
Django settings for yesornolive project.

Generated by 'django-admin startproject' using Django 1.8.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import raven
from .config import *

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$07xe-=*l2rg)96)5q2e8ff094agrkxs3u-rel$98mu8chg(vf'

if os.environ.get('RDS_DB_NAME', ''):
    DEBUG = False
else:
    DEBUG = True

DEFAULT_FROM_EMAIL = 'info@yesornolive.com'

if os.environ.get('RDS_DB_NAME'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],

            # 'OPTIONS': {
            #      "init_command": "SET foreign_key_checks = 0;",
            # },
        }
    }


    #to configure s3 bucket to hold media and staic files in aws

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    STATICFILES_STORAGE  = 'storages.backends.s3boto.S3BotoStorage'

    AWS_ACCESS_KEY_ID        = os.environ['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY    = os.environ['AWS_SECRET_KEY']
    AWS_STORAGE_BUCKET_NAME  = 'yesornolive'

    SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

    # This will make sure that the file URL does not have unnecessary parameters like your access key.
    AWS_QUERYSTRING_AUTH = False 
    AWS_S3_CUSTOM_DOMAIN = AWS_STORAGE_BUCKET_NAME + '.s3.amazonaws.com'

    #static media settings
    STATIC_URL = 'https://' + AWS_STORAGE_BUCKET_NAME + '.s3.amazonaws.com/'
    MEDIA_URL = STATIC_URL + 'media/'
    STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'), )
    STATIC_ROOT = 'staticfiles'
    ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'
    STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    )

    SERVER_EMAIL = DEFAULT_FROM_EMAIL

    ADMINS = [

     ('Isaiah Iyede', 'isaiah.iyede@yesornolive.com'),
     ('Olajumoke ogundeko', 'olajumoke.ogundeko@yesornolive.com'),
     
    ]


# 77Ruzki1FNe1ncZq
# muFPwCNW4fcNZxtx    
# U3HupMU7ADoRc4sx
# jK0Ut7NidrFHzgMM
# jO0DQzv4oTWXkv5h
# vIVy4Wfzdt00uxD9
# K7y879uJdCMgQUAz
# JiQUQxwAReNL9bQg
# PVFDoQHA2BvfoD5J
# jrNVMpZZJyDpuXi9
# LvnUidvb8iKrlpQI
# npEytsSD88Me9Xb0
# b8o5Me9yxC3xM2g4
# 1uzqnLZ2yebt0kqO
# jCjAqpxZMkRI2x85
# K0bFKuriWDaFfITl
# OH5YDW56F03MPPfA
# jgrn6FqqyYUGwwkx
# iMiKUqhzJWKUemZN
# 1l2W1bfOBkyyab8Y
# zdNTbt8MDFjjvMn1


else:

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
            'NAME': 'ynl_db',
            'USER': 'root',                      # Not used with sqlite3.
            'PASSWORD': '',                  # Not used with sqlite3.
            'HOST': '127.0.0.1',                 # Set to empty string for localhost. Not used with sqlite3.
            'PORT': '3306',

            # 'OPTIONS': {
            #      "init_command": "SET foreign_key_checks = 0;",
            # },                  # Set to empty string for default. Not used with sqlite3.
            },
    }



    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.sqlite3',
    #         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    #     }
    # }

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/1.8/howto/static-files/

    STATIC_ROOT = ''
    # URL prefix for static files.
    # Example: "http://media.lawrence.com/static/"
    STATIC_URL = '/static/'

    # Additional locations of static files
    STATICFILES_DIRS = (
        'static',
        # Put strings here, like "/home/html/static" or "C:/www/django/static".
        # Always use forward slashes, even on Windows.
        # Don't forget to use absolute paths, not relative paths.
    )

    # STATIC_URL = '/static/'
    # STATIC_ROOT = 'static'

    MEDIA_ROOT = 'media'
    MEDIA_URL = '/media/'

    INTERNAL_IPS = ('127.0.0.1',)

#SSL Security
# SECURE_SSL_REDIRECT = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# os.environ['wsgi.url_scheme'] = 'https'


EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.pepipost.com'
EMAIL_HOST_PASSWORD = 'Qwert1234!' #my gmail password , Qwert1234!
EMAIL_HOST_USER = 'yesornolive' #my gmail username, yesornolive
EMAIL_PORT = 587 
DEFAULT_FROM_EMAIL = 'info@yesornolive.com'

SESSION_SECURITY_WARN_AFTER = 60 * 60 * 24 * 2 #2days
SESSION_SECURITY_EXPIRE_AFTER = 60 * 60 * 24 * 2 #2days

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

SITE_ID = 1

ALLOWED_HOSTS = [

    'localhost',
    'yesnolive.pythonanywhere.com',
    'www.yesornolive.com',
    '.yesornolive.com',
    'ynl-env.msm7vq9swz.eu-west-1.elasticbeanstalk.com',
    'ynl2-env.msm7vq9swz.eu-west-1.elasticbeanstalk.com',

]


SESSION_EXPIRE_AT_BROWSER_CLOSE = True


TEMPLATE_PATH = os.path.join(BASE_DIR, 'templates')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # insert your TEMPLATE_DIRS here
            TEMPLATE_PATH,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this
                # list if you haven't customized them:
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                "django.core.context_processors.request",
            ],
            'debug': DEBUG,
        },
    },
]


AUTHENTICATION_BACKENDS = (
    'social_core.backends.twitter.TwitterOAuth',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.google.GooglePlusAuth',
    # 'backends.EmailAuthBackEnd',
    # 'backends.UsernameAuthBackEnd',
    'django.contrib.auth.backends.ModelBackend',
)


SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'social_core.pipeline.social_auth.associate_by_email',
    'yesornolive.pipeline.save_profile',
)
# Application definition
USE_UNIQUE_USER_ID = True

SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']

LOGIN_URL = '/login/Page/'
LOGOUT_URL = '/user-logout/'
LOGIN_REDIRECT_URL = '/'

# Application definition
DJANGO_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize'
)


YNL_APPS = (
    'general',
    'wallet',
    'ynladmin',
    'gameplay',
    'mobileValidator',
    'django.contrib.admin',
    'social_django',
    'storages',
    # sentry app
    'raven.contrib.django.raven_compat',
)


#if DEBUG == True:
if not os.environ.get('RDS_DB_NAME'):
    YNL_APPS+=('debug_toolbar',)# 'cities_light',)
    

INSTALLED_APPS = DJANGO_APPS + YNL_APPS

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'yesornolive.middleware.AutoLogout',
]

AUTO_LOGOUT_DELAY = 60

ROOT_URLCONF = 'yesornolive.urls'

WSGI_APPLICATION = 'yesornolive.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

#TIME_ZONE = 'UTC'
TIME_ZONE = 'Africa/Lagos'

USE_L10N = True

TIME_INPUT_FORMATS = ('%I:%M %p',)

USE_TZ = True

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'


# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#         'LOCATION': [
#             '127.0.0.1:8001',
#             '127.0.0.1:8002',
#         ]
#     }
# }


from django.http import UnreadablePostError
def skip_unreadable_post_error(record):
    if record.exc_info:
        exc_type, exc_value = record.exc_info[:2]
        if isinstance(exc_value, UnreadablePostError):
            return False
    return True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'WARNING',
        'handlers': ['sentry'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'skip_unreadable_posts':{
            '()': 'django.utils.log.CallbackFilter',
            'callback': skip_unreadable_post_error,
        },

    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false', 'skip_unreadable_posts'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True
        },
        'sentry': {
            'level': 'ERROR', # To capture more than ERROR, change to WARNING, INFO, etc.
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'tags': {'custom-tag': 'x'},
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        # 'null':{
        #         'class': 'django.utils.log.NullHandler',
        # }
        'null':{
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
    }
}



# sentry configuration
RAVEN_CONFIG = {
    'dsn': 'https://d9b26bf1721949ccbb7af8f625311e1e:1664b639c0c24e1fb6e0b980072b970a@sentry.io/236474',
    # If you are using git, you can also automatically configure the
    # release based on the git info.
    # 'release': raven.fetch_git_sha(os.path.dirname(os.pardir)),
}

